!!!! My Notes !!!!

// REDUX

EXAMPLE ACTION CREATOR
- returns a type and payload

const createDocument = (name, amount) => {
  return {
    type: 'CREATE_DOCUMENT',
    payload: {
      name: name,
      amount: amount
    }
  }
}

const createClaim = (name, amount) => {
  return {
    type: 'CREATE_CLAIM';
    payload: {
      name: name,
      amount: amount
    }
  }

}


// REDUCERS

every reducer is always a function, 2 arguments, 

always return new array, new data structurs. for example, don't use push 

**** RULES OF REDUCERS ****

- Must return any value besides 'undefined'
- Produce 'state' or data to be used inside of your app using only previous state and the action
- Must not return out of itself to decide what value to return (reducers are pure)
- Must not mutate its input 'state' argument
  - if you returning a string or number you don't have to worry about mutation
  - arrays, object, etc you do have to worry about mutation
  - never ever going to write something like state.name = "Nick" to mutate object 
 side note: don't make api request from reducer or solicit user for input

--> Array
Removing element: state.filter(element => element !== "hi")
Adding element: [...state, "hi"];
Adding element to front or array: ["hi", ...state]
Replacing element: state.map(element => element === "hi" ? "bye" : element);

--> Object
Updateing a property: {...state, name: "Nick"}
Adding a property: {...state, ranking: 8}
Removing a property: lodash:  _.omit(state. 'age') 
      not ideal way of doing it: {...state, ranking: undefined} 


const claimsHistory = (oldListOfClaims = [], action) => {
  if(action.type === 'CREATE_CLAIM') {
    return [...oldListOfClaims, action.payload];  
  }
  return oldListOfClaims;
}

const accounting = (bagOfMoney = 100, action) => {
  if(action.type === 'CREATE_CLAIM') {
    return bagOfMoney - action.payload.amountOfMoneyToCollect
  }  else if {action.type === 'CREATE_POLICY'} {
    return bagOfMoney + action.payload.amount;
  }
  return bagOfMoney;
}


const policies = (listOfPolicies = [], action) => {
  if(action.type === 'CREATE_POLICY') {
    return [...listOfPolicies, action.payload.name];
  } else if (action.type === 'DELETE_POLICY') {
    return listOfPolicies.filter(name => {
      name !== action.payload.name
    });
  }
  return listOfPolicies;
}


the store is an assembly of collection of reducers and action creators


***** NOTE when you start up react redux project you'll need to trick redux witih dummy reducers

const { createStore, combineReducers} = Redux;
const ourDepartments = combineReducers({
  accounting: accounting,
  claimsHistory: claimsHistory,
  policies: polices
})

const store = createStore(ourDepartments);





useful functions:

const action = createPolicy('Alex', 20);

store.dispatch(action);
store.dispatch(createPolicy('Nick', 50));
store.dispatch(createPolicy('Bob', 60));
store.getState()



// MAP STATE TO PROPS
take state object--all of data in redux store, 
run calculation on it to cause data to show up as  
props inside component



REDUX THUNK

action creators can return action objects
or action creators can return functions
handle action creators

